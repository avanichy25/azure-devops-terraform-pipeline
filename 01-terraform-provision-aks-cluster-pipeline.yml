# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIORNMENT
  value: qa

stages:
  - stage: TerraformValidate
    jobs:
    - job: TerraformJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'terraform-aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'terraformstoragergdev'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'terraform.tfstate'
          allowTelemetryCollection: false
      
      - task: TerraformCLI@0
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false
  
  - stage: Deployakscluster
    jobs:
      - deployment: deploy
        pool:
          vmImage: ubuntu-latest
        environment: $(DEV_ENVIORNMENT)
        strategy:
         runOnce:
          deploy:
            steps:
              - task: DownloadSecureFile@1
                name: sshkey
                inputs:
                 secureFile: 'aksprodsshkey.pub'
              
              - task: TerraformCLI@0
                inputs:
                  command: 'init'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  backendType: 'azurerm'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'terraform-storage-rg'
                  backendAzureRmStorageAccountName: 'terraformstoragergdev'
                  backendAzureRmContainerName: 'tfstatefiles'
                  backendAzureRmKey: 'terraform.tfstate'
                  allowTelemetryCollection: false
              
              - task: TerraformCLI@0
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEV_ENVIRONMENT)'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con'
                  allowTelemetryCollection: false
        

      
      
